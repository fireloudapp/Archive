@using MudBlazor.ThemeManager
@inherits LayoutComponentBase

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    @*<MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
    <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" 
    Theme="_themeManager" ThemeChanged="UpdateTheme" />
    <MudThemeProvider Theme="_themeManager.Theme" />*@
    <MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme"/>

    <MudAppBar Elevation="_themeManager.AppBarElevation">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://mudblazor.com/" Target="_blank" />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/MudBlazor/MudBlazor/" Target="_blank" />
       
        <MudToggleIconButton             
                    Toggled="@ThemeChanged" 
                    ToggledChanged="OnToggledChanged"
                     Icon="@Icons.Rounded.WbSunny" Color="Color.Warning" 
                     Title="Off"
                     ToggledIcon="@Icons.TwoTone.WbSunny" 
                     ToggledColor="@Color.Success" 
                     ToggledTitle="On"/>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">
                <a class="navbar-brand" href="" style="font-size: 24px;font-family: cursive;">
			        <i class="icofont-butterfly-alt icofont-2x" 
			        style="color: lightcoral; font-size: 28px;"></i> 
			        Fire Clients
                </a>
            </MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-2 pt-2">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {

    private bool _isDarkMode = true;
    protected override void OnInitialized()
    {
        //StateHasChanged();
        Console.WriteLine($"Dark Or Light : {_isDarkMode}");
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    #region Theme Manager Code
    private bool ThemeChanged 
    {
        get;set;
    }

    public void OnToggledChanged(bool toggled)
    {
        // Because variable is not two-way bound, we need to update it ourself
        ThemeChanged = toggled;
        _isDarkMode = toggled;
        Console.WriteLine($"Is DarkMode {_isDarkMode}");
    }
    
    
    bool _drawerOpen = true;
    private MudTheme _theme = new();
    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    //public bool _themeManagerOpen = false;

    //void OpenThemeManager(bool value)
    //{
    //    _themeManagerOpen = value;
    //}

    //void UpdateTheme(ThemeManagerTheme value)
    //{
    //    _themeManager = value;
    //    StateHasChanged();
    //}

    
    #endregion
}